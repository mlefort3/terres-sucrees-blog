---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPost from '@/layouts/BlogPost'
import Code from '@/components/mdx/Code'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { getPosts } from '@/utils'
import SButton from '@/components/mdx/SButton'

const posts = await getCollection('blog')
export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}))
}
type Props = CollectionEntry<'blog'>

const post = Astro.props
const MAX_POSTS = 3
const getRelatedPosts = (post: Props) => {
	const lowercaseTags = post.data.tags.map((tag) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) => p.slug !== post.slug && p.data.tags.some((t) => lowercaseTags.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post.render()
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- post -->
		<article class='max-w-full w-full'>
			<div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
				<Content components={{ pre: Code, SButton }} />
			</div>

			<!-- related posts -->
			<footer>
				<h2 class='font-bold text-lg dark:text-white mb-6'>Recettes recommand√©es</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	<script type='text/javascript'>
		;(function () {
			const REMARK_SCRIPT_SRC = 'https://comments.terres-sucrees.fr/web/embed.js'
			const REMARK_SCRIPT_ATTR = 'data-remark42-script'

			function isDarkMode() {
				return document.documentElement.classList.contains('dark')
			}

			// Load the widget
			function loadRemark42() {
				const container = document.getElementById('remark42')
				if (!container) return

				window.remark_config = {
					host: 'https://comments.terres-sucrees.fr',
					site_id: 'terres-sucrees-blog-9',
					components: ['embed', 'css'],
					theme: isDarkMode() ? 'dark' : 'light',
					locale: 'fr'
				}

				const script = document.createElement('script')
				script.src = REMARK_SCRIPT_SRC
				script.defer = true
				script.setAttribute(REMARK_SCRIPT_ATTR, 'true')
				document.body.appendChild(script)
			}

			// Remove widget but keep the container in place
			function unloadRemark42() {
				document.querySelectorAll(`script[${REMARK_SCRIPT_ATTR}]`).forEach((s) => s.remove())
				const container = document.getElementById('remark42')
				if (container) container.innerHTML = ''
			}

			let lastDark = null

			// Loads only when the <html> theme is correct
			function ensureCorrectInitialTheme() {
				const currentDark = isDarkMode()

				// First run and dark mode not detected yet?
				if (lastDark === null) {
					lastDark = currentDark
					unloadRemark42()
					loadRemark42()
					return true
				}

				return false
			}

			// Detect theme changes after initial load
			function reloadOnThemeChange() {
				const nowDark = isDarkMode()
				if (nowDark === lastDark) return
				lastDark = nowDark

				unloadRemark42()
				requestAnimationFrame(loadRemark42)
			}

			// 1. Wait until the theme class is correctly applied (fixes "first page load" bug)
			const themeWaiter = setInterval(() => {
				if (isDarkMode() || !isDarkMode()) {
					// always true, but ensures class detection
					clearInterval(themeWaiter)
					ensureCorrectInitialTheme()
				}
			}, 10) // check very fast until <html> has the expected theme

			// 2. Watch theme changes via MutationObserver
			const observer = new MutationObserver((mutations) => {
				for (const m of mutations) {
					if (m.attributeName === 'class') {
						reloadOnThemeChange()
					}
				}
			})

			observer.observe(document.documentElement, {
				attributes: true,
				attributeFilter: ['class']
			})
		})()
	</script>

	<script type='text/javascript'>
		!(function (e, n) {
			for (var o = 0; o < e.length; o++) {
				var r = n.createElement('script'),
					c = '.js',
					d = n.head || n.body
				;('noModule' in r ? ((r.type = 'module'), (c = '.mjs')) : (r.async = !0),
					(r.defer = !0),
					(r.src = window.remark_config.host + '/web/' + e[o] + c),
					d.appendChild(r))
			}
		})(window.remark_config.components || ['embed'], document)
	</script>

	<!-- Comments container -->

	<div class='mt-40;' style='margin-top:20px'>
		<div id='remark42'></div>
	</div>
</BlogPost>
